# 자동매매 프로그램 PRD

## Overview
ICT(Inner Circle Trader) 이론 기반의 암호화폐 자동매매 프로그램으로, 바이낸스 선물 시장에서 안정적이고 지속적인 수익을 목표로 합니다. 개인 투자자를 위한 24시간 무인 매매 시스템으로서, 엄격한 리스크 관리와 이론적 근거가 명확한 매매 전략을 통해 시장 변동성을 활용합니다.

**핵심 가치**
- 검증된 ICT 이론에 기반한 체계적 매매
- 안정적인 연결과 리스크 관리 우선
- 확장 가능한 아키텍처를 통한 미래 성장

## Core Features

### 1. ICT 전략 엔진
- **기능**: ICT 이론(Order Block, Fair Value Gap, Liquidity Sweep 등)에 기반한 매매 신호 생성
- **중요성**: 시장 메이커의 행동 패턴을 분석하여 높은 승률의 진입점 포착
- **작동 방식**: 실시간 캔들 데이터 분석을 통한 구조적 레벨 식별 및 신호 발생

### 2. 멀티 전략 프레임워크
- **기능**: ICT 기본 전략 외에 전통적 지표 기반 전략 플러그인 방식 지원
- **중요성**: 시장 상황에 따른 전략 유연성 확보
- **작동 방식**: 전략 인터페이스 표준화를 통한 교체 가능한 모듈 구조

### 3. 고급 리스크 관리 시스템
- **기능**: 동적 포지션 사이징, 다층 손절/익절, 최대 드로우다운 제한
- **중요성**: 장기적 자본 보존과 안정적 수익 확보
- **작동 방식**: 실시간 계좌 상태 모니터링 및 리스크 파라미터 자동 조정

### 4. 이벤트 기반 비동기 아키텍처
- **기능**: 중앙 메시징 허브를 통한 모든 컴포넌트 간 비동기 통신
- **중요성**: 높은 처리량과 안정적인 시스템 운영
- **작동 방식**: 발행-구독 패턴으로 시장데이터 수신 → 분석 → 신호생성 → 주문실행 파이프라인
- **설계 원칙**: SOLID 원칙 준수, 간결한 네이밍, 높은 가독성과 재사용성

### 5. 연결 안정성 관리
- **기능**: WebSocket 연결 모니터링, 자동 재연결, 오류 복구
- **중요성**: 24시간 무중단 운영을 위한 필수 기능
- **작동 방식**: 연결 상태 감시 및 장애 시 즉시 복구 메커니즘

### 6. Discord 알림 시스템
- **기능**: 거래 체결, 오류 발생, 시스템 상태 실시간 알림
- **중요성**: 무인 운영 중 중요 사항 즉시 파악
- **작동 방식**: Discord Webhook을 통한 구조화된 메시지 전송

## User Experience

### 사용자 페르소나
- **주사용자**: 개인 암호화폐 투자자
- **기술 수준**: 중급 이상 (Python 기본 지식, 거래 경험 보유)
- **사용 목적**: 24시간 자동 매매를 통한 안정적 수익 추구

### 핵심 사용자 플로우

#### 1. 초기 설정 플로우
1. 바이낸스 API 키 설정
2. Discord Webhook URL 설정  
3. 기본 전략 선택 (ICT 기본 전략)
4. 리스크 파라미터 설정 (최대 레버리지, 손절 비율 등)
5. 거래 대상 코인 선택 (초기: BTC/USDT)

#### 2. 운영 모니터링 플로우
1. 시스템 시작 및 연결 상태 확인
2. Discord를 통한 실시간 거래 내역 수신
3. 오류 발생 시 알림 수신 및 대응
4. 주기적 수익률 및 리스크 지표 확인

#### 3. 설정 변경 플로우 (향후 UI 개발 시)
1. 웹/모바일 대시보드 접근
2. 전략 변경 또는 파라미터 조정
3. 실시간 적용 및 결과 모니터링

### UI/UX 고려사항
- **현재**: 설정 파일 기반 간단한 인터페이스
- **향후**: 직관적인 웹/모바일 대시보드 (기본 기능 완성 후 개발)

## Technical Architecture

### 설계 철학 및 원칙

#### SOLID 원칙 적용
- **단일 책임 원칙(SRP)**: 각 클래스는 하나의 명확한 책임만 가짐
- **개방-폐쇄 원칙(OCP)**: 확장에는 열려있고 수정에는 닫혀있는 구조
- **리스코프 치환 원칙(LSP)**: 상위 타입의 객체를 하위 타입으로 교체 가능
- **인터페이스 분리 원칙(ISP)**: 클라이언트별 특화된 인터페이스 제공
- **의존성 역전 원칙(DIP)**: 구체적 구현이 아닌 추상화에 의존

#### 코드 품질 기준
- **가독성**: 명확하고 직관적인 코드 구조, 주석 최소화를 위한 자명한 코드
- **확장성**: 새로운 전략이나 기능 추가 시 기존 코드 수정 최소화
- **간결성**: 불필요한 복잡성 제거, 핵심 로직에 집중
- **재사용성**: 공통 기능의 모듈화, 중복 코드 제거

#### 네이밍 컨벤션 (PEP 8 준수)
```python
# 클래스: PascalCase, 명확한 역할 표현
class MarketDataProcessor:  # ✓ 간결하면서 명확
class AsyncMarketDataProcessor:  # ✗ async 접두어 불필요

# 함수/메서드: snake_case, 동사형
def process_candle_data():  # ✓ 
def get_signal():  # ✓
def async_get_signal():  # ✗ async 접두어 불필요

# 변수: snake_case, 의미 명확
current_price = 50000  # ✓
btc_usdt_price = 50000  # ✓ 컨텍스트가 명확한 경우
p = 50000  # ✗ 의미 불명확

# 상수: UPPER_SNAKE_CASE
MAX_POSITION_SIZE = 1000  # ✓
DEFAULT_STOP_LOSS_PCT = 0.02  # ✓
```

### 시스템 컴포넌트

#### 1. 코어 시스템
```
trading_bot/
├── core/
│   ├── event_hub.py           # 중앙 이벤트 메시징 허브
│   ├── config_manager.py      # 설정 관리
│   └── logger.py              # 로깅 시스템
├── market_data/
│   ├── binance_client.py      # 바이낸스 API 클라이언트
│   ├── data_processor.py      # 시장 데이터 처리
│   └── websocket_manager.py   # WebSocket 연결 관리
├── strategies/
│   ├── base_strategy.py       # 전략 기본 인터페이스
│   ├── ict_strategy.py        # ICT 기반 전략
│   └── indicator_strategy.py  # 전통적 지표 기반 전략
├── risk_management/
│   ├── position_sizer.py      # 포지션 사이징
│   ├── risk_calculator.py     # 리스크 계산
│   └── drawdown_monitor.py    # 드로우다운 모니터링
├── trading/
│   ├── order_manager.py       # 주문 관리
│   ├── portfolio_manager.py   # 포트폴리오 관리
│   └── execution_engine.py    # 주문 실행 엔진
└── notification/
    └── discord_notifier.py    # Discord 알림
```

#### 2. 데이터 모델
```python
@dataclass
class MarketData:
    symbol: str
    timestamp: int
    price: float
    volume: float
    
@dataclass
class TradingSignal:
    symbol: str
    action: str  # BUY/SELL
    price: float
    stop_loss: float
    take_profit: float
    confidence: float

@dataclass
class Position:
    symbol: str
    side: str
    size: float
    entry_price: float
    unrealized_pnl: float
```

### API 및 통합
- **바이낸스 API**: python-binance 공식 라이브러리 사용
- **WebSocket**: 실시간 시장 데이터 스트리밍
- **Discord API**: Webhook을 통한 알림 전송

### 인프라 요구사항
- **서버**: Vultr VPS (Ubuntu 20.04 LTS)
- **Python**: 3.9 이상
- **메모리**: 최소 2GB RAM
- **스토리지**: 20GB SSD
- **네트워크**: 안정적인 인터넷 연결 (99.9% 업타임)

## Development Roadmap

### Phase 1: MVP - 기본 매매 시스템 (핵심)
**목표**: 단일 전략, 단일 코인으로 실전 매매 가능한 기본 시스템

**구현 범위**:
- 바이낸스 API 연결 및 인증
- 기본 ICT 전략 (Order Block 기반)
- BTCUSDT 무기한선물 전용
- 기본적인 리스크 관리 (고정 스톱로스, 포지션 사이징)
- Discord 기본 알림 (진입/청산)
- WebSocket 실시간 데이터 수신
- 간단한 로깅 시스템

**주요 클래스**:
- `BinanceClient`, `ICTStrategy`, `RiskManager`, `OrderManager`, `DiscordNotifier`
- **설계 중점**: 각 클래스는 단일 책임 원칙 준수, 간결한 네이밍으로 역할 명확화

### Phase 2: 안정성 및 확장성 강화
**목표**: 24시간 안정 운영 가능한 시스템

**구현 범위**:
- 연결 끊김 자동 복구
- 오류 처리 및 예외 상황 대응
- 고급 리스크 관리 (동적 포지션 사이징, 트레일링 스톱)
- 상세한 거래 로깅 및 성과 분석
- 시스템 상태 모니터링
- 설정 파일 기반 파라미터 관리

**주요 개선사항**:
- `ConnectionManager`, `ErrorHandler`, `PerformanceAnalyzer`
- **설계 강화**: 인터페이스 분리 원칙 적용, 의존성 주입을 통한 테스트 용이성 확보

### Phase 3: 멀티 전략 및 멀티 코인 지원
**목표**: 확장 가능한 전략 프레임워크 구축

**구현 범위**:
- 전략 인터페이스 표준화
- 복수 ICT 전략 추가 (Fair Value Gap, Liquidity Sweep)
- 전통적 지표 기반 전략 (RSI, MACD 등)
- 주요 알트코인 지원 (ETH, BNB, ADA 등)
- 전략별 성과 비교 분석

**주요 클래스**:
- `StrategyFactory`, `MultiSymbolManager`, `StrategyComparator`
- **아키텍처 진화**: 개방-폐쇄 원칙을 통한 전략 확장성, 팩토리 패턴으로 객체 생성 추상화

### Phase 4: 고급 기능 및 최적화
**목표**: 전문적인 매매 시스템으로 완성

**구현 범위**:
- 바이낸스 코인 선물 지원
- 고급 ICT 패턴 인식 (SMC, Market Structure)
- 포트폴리오 다각화 및 상관관계 분석
- 백테스팅 시스템
- 성과 최적화 (파라미터 튜닝)
- 상세한 거래 분석 리포트

### Phase 5: 사용자 인터페이스 (기본 기능 완성 후)
**목표**: 편리한 모니터링 및 제어 시스템

**구현 범위**:
- 웹 기반 대시보드 (Flask/FastAPI)
- 실시간 거래 현황 모니터링
- 모바일 반응형 인터페이스
- 전략 및 설정 실시간 변경
- 상세한 차트 및 분석 도구

## Logical Dependency Chain

### 1단계: 기반 인프라 (Foundation)
**우선순위**: 최고
**구성요소**:
- 이벤트 허브 시스템
- 바이낸스 API 클라이언트
- 기본 설정 관리
- 로깅 시스템

**이유**: 모든 상위 기능의 기반이 되는 핵심 인프라

### 2단계: 데이터 파이프라인
**의존성**: 1단계 완료 후
**구성요소**:
- WebSocket 연결 관리
- 실시간 데이터 처리
- 데이터 검증 및 정규화

**이유**: 전략 실행을 위한 정확한 시장 데이터 필수

### 3단계: 기본 전략 엔진
**의존성**: 2단계 완료 후
**구성요소**:
- ICT 기본 전략 (Order Block)
- 신호 생성 및 검증
- 전략 백테스팅 기능

**이유**: 실제 거래 로직의 핵심, 충분한 검증 필요

### 4단계: 리스크 관리 시스템
**의존성**: 3단계와 병렬 진행 가능
**구성요소**:
- 포지션 사이징
- 스톱로스/테이크프로핏
- 최대 드로우다운 제한

**이유**: 전략과 독립적이지만 실전 투입 전 필수

### 5단계: 주문 실행 시스템
**의존성**: 1-4단계 완료 후
**구성요소**:
- 주문 생성 및 전송
- 체결 확인 및 상태 관리
- 오류 처리 및 재시도

**이유**: 모든 구성요소가 통합되어야 안전한 실행 가능

### 6단계: 알림 및 모니터링
**의존성**: 5단계와 병렬 진행
**구성요소**:
- Discord 알림
- 시스템 상태 모니터링
- 성과 분석 리포트

**이유**: 무인 운영을 위한 필수 기능

### 개발 페이싱 전략
- **Atomic Building**: 각 단계를 완전히 테스트 후 다음 단계 진행
- **Incremental Integration**: 새 기능 추가 시 기존 기능 영향 최소화
- **Early Visibility**: 2단계 완료 시점에서 기본적인 시장 데이터 시각화 제공
- **Continuous Testing**: 각 단계마다 테스트넷에서 충분한 검증

## Risks and Mitigations

### 기술적 위험

#### 1. API 연결 불안정
**위험**: 바이낸스 API 연결 끊김으로 인한 거래 실패
**완화 방안**:
- 자동 재연결 메커니즘
- 연결 상태 실시간 모니터링
- 백업 연결 경로 구성
- 연결 실패 시 즉시 Discord 알림

#### 2. 주문 실행 지연
**위험**: 네트워크 지연으로 인한 슬리피지 확대
**완화 방안**:
- 지연 시간 측정 및 임계값 설정
- 주문 타임아웃 관리
- 슬리피지 허용 범위 설정

#### 3. 메모리 누수 및 성능 저하
**위험**: 장기 운영 시 시스템 리소스 고갈
**완화 방안**:
- 정기적인 메모리 정리
- 리소스 사용량 모니터링
- 자동 재시작 메커니즘

### MVP 설계 위험

#### 1. 과도한 복잡성
**위험**: 초기부터 너무 많은 기능 구현으로 개발 지연
**완화 방안**:
- 단일 전략, 단일 코인으로 범위 제한
- 핵심 기능 우선 개발
- 선택적 기능은 후순위 배치

#### 2. 불충분한 검증
**위험**: 이론적 전략이 실제 시장에서 효과 부족
**완화 방안**:
- 철저한 백테스팅
- 소액 자본으로 실전 검증
- 단계적 자본 확대
- **코드 품질**: 검증 로직의 재사용성 확보, 명확한 테스트 케이스 작성

#### 3. 리스크 관리 미흡
**위험**: 초기 손실로 인한 자본 손실
**완화 방안**:
- 보수적인 포지션 사이징
- 엄격한 스톱로스 설정
- 일일 최대 손실 제한

### 리소스 제약

#### 1. 개발 시간 부족
**위험**: 개인 프로젝트로 인한 개발 속도 제한
**완화 방안**:
- 명확한 우선순위 설정
- 단계별 목표 명시
- 자동화 도구 활용
- **개발 효율성**: 간결한 코드 작성으로 유지보수 시간 단축, 재사용 가능한 컴포넌트 우선 개발

#### 2. 테스트 환경 제한
**위험**: 실전 환경과의 차이로 인한 예상치 못한 오류
**완화 방안**:
- 바이낸스 테스트넷 활용
- 소액 실전 테스트
- 단계적 자본 투입

## Appendix

### 기술 명세서

#### 코딩 표준 (중점 사항)

**SOLID 원칙 실천 방안**:
```python
# 단일 책임 원칙 예시
class OrderValidator:  # 주문 검증만 담당
    def validate(self, order: Order) -> bool: pass

class OrderExecutor:   # 주문 실행만 담당  
    def execute(self, order: Order) -> bool: pass

# 개방-폐쇄 원칙 예시
class Strategy(ABC):
    @abstractmethod
    def generate_signal(self, data: MarketData) -> Signal: pass

class ICTStrategy(Strategy):  # 새로운 전략 추가 시 기존 코드 수정 불필요
    def generate_signal(self, data: MarketData) -> Signal: pass
```

**네이밍 원칙 강화**:
- 클래스명: 명사형, 역할이 즉시 이해되는 이름
- 메서드명: 동사형, 수행하는 동작이 명확한 이름  
- 변수명: 타입과 용도가 유추 가능한 이름
- async/await 사용 시에도 함수명에 async 접두어 사용 금지

**가독성 최우선 원칙**:
- 주석보다는 코드 자체로 의도 전달
- 복잡한 로직은 작은 메서드로 분해
- 매직 넘버 대신 의미 있는 상수 사용

#### 개발 환경
- **언어**: Python 3.9+
- **주요 라이브러리**:
  - `python-binance`: 바이낸스 API 클라이언트
  - `asyncio`: 비동기 처리
  - `pandas`, `numpy`: 데이터 분석
  - `aiohttp`: 비동기 HTTP 클라이언트
  - `websockets`: WebSocket 연결
  - `discord-webhook`: Discord 알림

#### 코딩 표준
- **스타일**: PEP 8 준수 (필수)
- **네이밍**: 
  - 간결성과 명확성의 균형 
  - async 접두어 남발 금지
  - 역할 기반 명명 (기능 기반 아님)
- **구조**: SOLID 원칙 엄격 적용
- **품질**: 가독성 > 간결성 > 성능 순 우선순위
- **테스트**: 단위 테스트 및 통합 테스트 (테스트 주도 개발 권장)

#### ICT 전략 기본 개념
- **Order Block**: 기관 주문이 집중된 가격대
- **Fair Value Gap**: 가격 불균형 구간
- **Liquidity Sweep**: 유동성 사냥 패턴
- **Market Structure**: 시장 구조 변화 분석

#### 성과 지표
- **수익률**: 월간/연간 수익률
- **샤프 비율**: 위험 대비 수익 효율성
- **최대 드로우다운**: 최대 손실 구간
- **승률**: 수익 거래 비율
- **위험 수익 비율**: 평균 수익 대 평균 손실

#### 운영 환경 설정
- **서버**: Vultr VPS
- **OS**: Ubuntu 20.04 LTS
- **Python 환경**: venv 또는 conda
- **프로세스 관리**: systemd 또는 supervisord
- **로그 관리**: logrotate 설정